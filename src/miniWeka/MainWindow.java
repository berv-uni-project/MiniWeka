/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package miniWeka;

import java.io.File;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.GreedyStepwise;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.trees.J48;
import weka.core.converters.ConverterUtils.DataSource;
import weka.core.Instances;
import weka.core.converters.ConverterUtils.DataSink;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.NumericToNominal;

/**
 *
 * @author Bervianto Leo P
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        evaluateRadioGroup = new javax.swing.ButtonGroup();
        allBar = new javax.swing.JPanel();
        mainBar = new javax.swing.JPanel();
        openButton = new javax.swing.JButton();
        filterButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        currentRelation = new javax.swing.JPanel();
        relationLabel = new javax.swing.JLabel();
        relationValue = new javax.swing.JLabel();
        attributesLabel = new javax.swing.JLabel();
        attributesValue = new javax.swing.JLabel();
        instancesLabel = new javax.swing.JLabel();
        instancesValue = new javax.swing.JLabel();
        sumOfWeightsLabel = new javax.swing.JLabel();
        sumOfWeightsValue = new javax.swing.JLabel();
        evaluateBar = new javax.swing.JPanel();
        evaluateLabel = new javax.swing.JLabel();
        crossRadio = new javax.swing.JRadioButton();
        fullRadio = new javax.swing.JRadioButton();
        startButton = new javax.swing.JButton();
        resultEvaluate = new javax.swing.JScrollPane();
        resultEvaluateArea = new javax.swing.JTextArea();
        statusBar = new javax.swing.JPanel();
        status = new javax.swing.JLabel();
        defaultMenu = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        exit = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        aboutMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mini Weka");
        getContentPane().setLayout(new java.awt.GridLayout());

        allBar.setLayout(new javax.swing.BoxLayout(allBar, javax.swing.BoxLayout.Y_AXIS));

        openButton.setText("Open File");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        mainBar.add(openButton);

        filterButton.setText("Filter");
        filterButton.setEnabled(false);
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });
        mainBar.add(filterButton);

        saveButton.setText("Save File");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        mainBar.add(saveButton);

        allBar.add(mainBar);

        currentRelation.setLayout(new java.awt.GridLayout(2, 2));

        relationLabel.setText("Relation : ");
        currentRelation.add(relationLabel);
        currentRelation.add(relationValue);

        attributesLabel.setText("Attributes : ");
        currentRelation.add(attributesLabel);
        currentRelation.add(attributesValue);

        instancesLabel.setText("Instances : ");
        currentRelation.add(instancesLabel);
        currentRelation.add(instancesValue);

        sumOfWeightsLabel.setText("Sum of weights : ");
        currentRelation.add(sumOfWeightsLabel);
        currentRelation.add(sumOfWeightsValue);

        allBar.add(currentRelation);

        evaluateBar.setLayout(new javax.swing.BoxLayout(evaluateBar, javax.swing.BoxLayout.Y_AXIS));

        evaluateLabel.setText("Mode Pembelajaran :");
        evaluateBar.add(evaluateLabel);

        evaluateRadioGroup.add(crossRadio);
        crossRadio.setText("Cross-Validation 10-fold");
        crossRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crossRadioActionPerformed(evt);
            }
        });
        evaluateBar.add(crossRadio);

        evaluateRadioGroup.add(fullRadio);
        fullRadio.setText("Full Training");
        fullRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullRadioActionPerformed(evt);
            }
        });
        evaluateBar.add(fullRadio);

        startButton.setText("Start");
        startButton.setEnabled(false);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        evaluateBar.add(startButton);

        resultEvaluateArea.setEditable(false);
        resultEvaluateArea.setColumns(20);
        resultEvaluateArea.setRows(5);
        resultEvaluateArea.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        resultEvaluate.setViewportView(resultEvaluateArea);

        evaluateBar.add(resultEvaluate);

        allBar.add(evaluateBar);

        statusBar.setLayout(new javax.swing.BoxLayout(statusBar, javax.swing.BoxLayout.LINE_AXIS));
        statusBar.add(status);

        allBar.add(statusBar);

        getContentPane().add(allBar);

        File.setText("File");

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        File.add(exit);

        defaultMenu.add(File);

        Help.setText("Help");

        aboutMenu.setText("About");
        Help.add(aboutMenu);

        defaultMenu.add(Help);

        setJMenuBar(defaultMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        if(evt.getSource() == this.openButton) {
            this.fc.setAcceptAllFileFilterUsed(false);
            this.fc.addChoosableFileFilter(new CustomFilter());
            int returnVal = this.fc.showOpenDialog(MainWindow.this);
            
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                try {
                    File file = this.fc.getSelectedFile();
                    this.status.setText("Opening: " + file.getName() + ".\n");
                    this.data = DataSource.read(file.getAbsolutePath());
                    if (this.data.classIndex() == -1) {
                        this.data.setClassIndex(this.data.numAttributes() - 1);
                    }
                    this.instancesValue.setText(String.valueOf(this.data.numInstances()));
                    this.attributesValue.setText(String.valueOf(this.data.numAttributes()));
                    this.relationValue.setText(String.valueOf(this.data.relationName()));
                    this.sumOfWeightsValue.setText(String.valueOf(this.data.sumOfWeights()));
                    this.saveButton.setEnabled(true);
                    this.filterButton.setEnabled(true);
                    this.startButton.setEnabled(true);
                } catch (Exception ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                this.status.setText("Open command cancelled by user.\n");
            }
        }        
    }//GEN-LAST:event_openButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if(evt.getSource()==this.saveButton) {
            this.fc.setAcceptAllFileFilterUsed(false);
            this.fc.addChoosableFileFilter(new CustomFilter());
            int returnVal = this.fc.showSaveDialog(MainWindow.this);
            
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                try {
                    File file = this.fc.getSelectedFile();
                    this.status.setText("Saving: " + file.getName() + ".\n");
                    DataSink.write(file.getAbsolutePath(), this.data);
                } catch (Exception ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                this.status.setText("Save command cancelled by user.\n");
            }
        }    
    }//GEN-LAST:event_saveButtonActionPerformed

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        if (evt.getSource() == this.filterButton) { 
            try {
                NumericToNominal filter = new NumericToNominal();
                filter.setInputFormat(this.data);
                this.data = Filter.useFilter(this.data, filter);
            } catch (Exception ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_filterButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        if (evt.getSource() == this.startButton) {
            if (this.crossRadio.isSelected()) {
                try {
                    // cross-validate classifier
                    Evaluation evaluation = new Evaluation(this.data);
                    J48 tree = new J48();
                    evaluation.crossValidateModel(tree, this.data, 10, new Random(1));
                    this.resultEvaluateArea.setText(evaluation.toSummaryString());
                } catch (Exception ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (this.fullRadio.isSelected()) {
                try {
                    Classifier cls = new J48();
                    cls.buildClassifier(this.data);
                    //evaluate classifier and print some statistics
                    Evaluation eval = new Evaluation(this.data);
                    eval.evaluateModel(cls, this.data);
                    this.resultEvaluateArea.setText(eval.toSummaryString());
                } catch (Exception ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                
            }
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void crossRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crossRadioActionPerformed
        
    }//GEN-LAST:event_crossRadioActionPerformed

    private void fullRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullRadioActionPerformed
        
    }//GEN-LAST:event_fullRadioActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    private Instances data;
    private final JFileChooser fc = new JFileChooser();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu File;
    private javax.swing.JMenu Help;
    private javax.swing.JMenuItem aboutMenu;
    private javax.swing.JPanel allBar;
    private javax.swing.JLabel attributesLabel;
    private javax.swing.JLabel attributesValue;
    private javax.swing.JRadioButton crossRadio;
    private javax.swing.JPanel currentRelation;
    private javax.swing.JMenuBar defaultMenu;
    private javax.swing.JPanel evaluateBar;
    private javax.swing.JLabel evaluateLabel;
    private javax.swing.ButtonGroup evaluateRadioGroup;
    private javax.swing.JMenuItem exit;
    private javax.swing.JButton filterButton;
    private javax.swing.JRadioButton fullRadio;
    private javax.swing.JLabel instancesLabel;
    private javax.swing.JLabel instancesValue;
    private javax.swing.JPanel mainBar;
    private javax.swing.JButton openButton;
    private javax.swing.JLabel relationLabel;
    private javax.swing.JLabel relationValue;
    private javax.swing.JScrollPane resultEvaluate;
    private javax.swing.JTextArea resultEvaluateArea;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel status;
    private javax.swing.JPanel statusBar;
    private javax.swing.JLabel sumOfWeightsLabel;
    private javax.swing.JLabel sumOfWeightsValue;
    // End of variables declaration//GEN-END:variables
}
